// solved usng Prims algo, try with kruskals algorithm also
// problem is exactly same as minimum cost to repair roads
// only change is here weight (cost) = distance *cost per unit length
// one line changed at line no 24 only

import java.util.*;
class Pair{
        int node;
        int weight;
        Pair(int node,int weight){
            this.node=node;
            this.weight=weight;
        }
}
public class CobbledStreets {
    public static int cobbledStreets(int n, ArrayList<ArrayList<Integer>> street, int p){
        // adj list
        ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<>();
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<ArrayList<Integer>>());
        }
        for(int i=0;i<street.size();i++){
            int u= street.get(i).get(0);
            int v = street.get(i).get(1);
            int weight = street.get(i).get(2)*p;    // weight = dist* cost per unit length
            ArrayList<Integer> adjNodeU = new ArrayList<>();
            adjNodeU.add(v);
            adjNodeU.add(weight);
            adj.get(u).add(adjNodeU);
            ArrayList<Integer> adjNodeV = new ArrayList<>();
            adjNodeV.add(u);
            adjNodeV.add(weight);
            adj.get(v).add(adjNodeV);
        }  
        // visited array
        ArrayList<Integer> visited = new ArrayList<>();
        for(int i=0;i<=n;i++){
            visited.add(0);
        }
        int totalcost=0;
        // minHeap
        PriorityQueue<Pair> minheap = new PriorityQueue<>( (a,b)-> a.weight-b.weight );
        minheap.add(new Pair(1,0));  // buildings are from 1 to N so, node 0 will never be used , so do not start from node 0
        int count=0;
        while(  count<n && !minheap.isEmpty()){ // till n nodes are popped also
        // when more than 1 component, queue will become empty before count equals n
            Pair curr = minheap.remove();
    
            int node= curr.node;
            int weight = curr.weight;
            // minheap may contain node more than once as we are not updating pair already present ,
            // but adding one more pair with better distance , hence skip such pop operation if node is already finalised
            if(visited.get(node)==1){
                continue;
            }
            //if not already finalised ,mark visited and add weight to totalcost
            visited.set(node,1);
            count++;
            totalcost+=weight;
            //process adj nodes
            for(ArrayList<Integer> adjc : adj.get(node)){
                int adjnode = adjc.get(0);
                int wt = adjc.get(1);
                if(visited.get(adjnode)==0){
                    minheap.add(new Pair(adjnode,wt));      
                }
            }
        }
        if(count!=n){  // all n nodes are not popped means graph has more than 1 component, so not possible to connect all nodes
            return -1;
        }
        return totalcost;
    }


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n,e,t,p;
        t = sc.nextInt();
        while(t>0){
            t--;
            p = sc.nextInt();
            n = sc.nextInt();
            e = sc.nextInt();
            ArrayList<ArrayList<Integer>>street = new ArrayList<ArrayList<Integer>>();
            for (int i = 0; i < e; i++) {
                street.add(new ArrayList<Integer>());
                street.get(i).add(sc.nextInt());
                street.get(i).add(sc.nextInt());
                street.get(i).add(sc.nextInt());
            }
            int ans = cobbledStreets(n,street,p);
            System.out.println(ans);
        }
        sc.close();
    }
}
