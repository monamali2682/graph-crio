problem given in DSA 5 - ADvanced data structures module

Problem Description
There are N cities and roads between some of the cities. Most of the roads have been damaged due to rains. We have to repair the roads to connect the cities again.
There is a fixed cost to repair a particular road. Find the minimum cost to connect all the cities by repairing the roads.
Note: If the cost of repairing a road is 0, that means it is not damaged.

import java.util.*;
class Pair{
        int node;
        int weight;
        Pair(int node,int weight){
            this.node=node;
            this.weight=weight;
        }
}
public class MinCostOfRoad {
    public static int minCostOfRoad(int n, ArrayList<ArrayList<Integer>> edges){
        // adj list
        ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<>();
        for(int i=0;i<=n;i++){
            adj.add(new ArrayList<ArrayList<Integer>>());
        }
        for(int i=0;i<edges.size();i++){
            int u= edges.get(i).get(0);
            int v = edges.get(i).get(1);
            int weight = edges.get(i).get(2);
            ArrayList<Integer> adjNodeU = new ArrayList<>();
            adjNodeU.add(v);
            adjNodeU.add(weight);
            adj.get(u).add(adjNodeU);
            ArrayList<Integer> adjNodeV = new ArrayList<>();
            adjNodeV.add(u);
            adjNodeV.add(weight);
            adj.get(v).add(adjNodeV);
        }  
        // visited array
        ArrayList<Integer> visited = new ArrayList<>();
        for(int i=0;i<=n;i++){
            visited.add(0);
        }
        int totalcost=0;
        // minHeap
        PriorityQueue<Pair> minheap = new PriorityQueue<>( (a,b)-> a.weight-b.weight );
        minheap.add(new Pair(1,0));
        int count=0;
        while(  count<n && !minheap.isEmpty()){ // till n nodes are popped also
        // when more than 1 component, queue will become empty before count equals n
            Pair curr = minheap.remove();
    
            int node= curr.node;
            int weight = curr.weight;
            // minheap may contain node more than once as we are not updating pair already present ,
            // but adding one more pair with better distance , hence skip such pop operation if node is already finalised
            if(visited.get(node)==1){
                continue;
            }
            //if not already finalised ,mark visited and add weight to totalcost
            visited.set(node,1);
            count++;
            totalcost+=weight;
            //process adj nodes
            for(ArrayList<Integer> adjc : adj.get(node)){
                int adjnode = adjc.get(0);
                int wt = adjc.get(1);
                if(visited.get(adjnode)==0){
                    minheap.add(new Pair(adjnode,wt));      
                }
            }
        }
        if(count!=n){  // all n nodes are not popped means graph has more than 1 component, so not possible to connect all nodes
            return -1;
        }
        return totalcost;
    }


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n,e;
        n = sc.nextInt();
        e = sc.nextInt();
        ArrayList<ArrayList<Integer>>edges = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < e; i++) {
            edges.add(new ArrayList<Integer>());
            edges.get(i).add(sc.nextInt());
            edges.get(i).add(sc.nextInt());
            edges.get(i).add(sc.nextInt());
        }
        int ans = minCostOfRoad(n,edges);
        System.out.print(ans);
        sc.close();
    }
}
